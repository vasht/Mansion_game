PROGRAM STRUCTURE - RESOLVED



20.09.2017
-Should the updater class just be static, without instances
or should it have them?
	-It so far doesn't even have any properties
-I don't see a reason for the updater class to have any instances,
it might just as well just be used statically
-I can even make the update listener function private, and it still
works as a listener function


18.09.2017 
-Where and when should the Mansion_game.loadLevel method be called?

Situations where it needs to be called:

1. When first starting the game:
	-Since I don't have a preloader or a Menu, the level starts immediately
	-It should be called by the main timeline after calling the init function
-I think for now this is the only time, since we don't have multiple levels
or saves and loads
-Unrelated, but I also realized that I should put the levels on separate frames,
instead of scenes, like I initially thought
	-People online have said not to use scenes because they're buggy
	-I didn't really believe them, but it's better to be safe than sorry


-Should the method in the controller class be called update
or something like respondToInput or readInput?

Option 1:
-It's called update()
	-Not immediately clear what it does, except that it
	runs every frame
	-Could possibly just run a method called something like 
	readInput inside the update method. 
		-That way it's clear inside the class that it
		both runs on every frame and that it reads input
-I think I'll go with this.

Option 2:
-It's called readInput
	-It's clear everywhere that it reads input, but might 	
	not be 100% clear that it runs on every frame...


14.09.2017 
-Where should the controllers be stored?
	-They will be stored in the Controller class, as static
	variables.
	-There will be a variable pointing to the gameplayController,
	one pointing to the menuController and one pointing to
	whichever controller is active at the moment

-Should the updater class have a method
that switches between a gameplay controller and a menu controller?
	-No. The Controller class will have a static function
	setController(controllerName:String) that sets the
	controller according to the given name.

-What class calls the Controller.init() function?
	-Since the Controller class doesn't need a reference
	to anything external (so far), it could just be called 
	from the Mansion_game's init function.

-Where is the controller created?
	-It's created in a static init function in the Controller class

-How does the Updater instance get a reference to the controller?
	-It doesn't. The active controller is stored as a static 
	variable in the Controller class.
	-The updator just does stuff to Controller.activeController.


-Where should the controllers be stored?

Option 1:
-The Updator class
	-The updator instantiates both controllers in its
	constructor
	-The updator has a function that switches between which
	controller should be active
	-The updator calls controller.update();
-I don't see a problem with this, other than it feels a bit weird for
some reason.

Option 2:
-Static variables in the Controller class
	-The Updator (or the Mansion_game's init method) would call a 
	static function Controller.init() where the controllers would be created
	-The updator's setController(controllerName:String) would
	call Controller.setController(controllerName:String)
	-The updator calls Controller.activeController.update();
-Somehow this feels like it makes more sense... It's probably good. :D


-Should the Mansion_game class create the controller inside of 
the loadLevel function, or should the updater class have a method
that switches between a gameplay controller and a menu controller?
	-If we're switching between two controllers, should the one
	not used be deleted, or should it be stored for use later?	
		-I can't know how much the player will be pausing,
		but the controller doesn't take much memory, since
		it doesn't contain anything graphical.
		-> We might as well keep it stored
		-> That means we should create both controllers early
		on.
		-> That means the updater class could create both 
		controllers in its constructor

-Where is the controller created?
	-In the Mansion_game class, in the method that starts a given level/floor
	-It creates the right controller first and then makes the flash app load
	the scene with the given name

-How does the Updater instance get a reference to the controller?
	-The Mansion_game sets the Updater's controller when creating it


13.09.2017
-Does the Updater class have to extend the MovieClip class
to be able to have the onEnterFrame event listener?
	-It seems like you can only add event listeners to display
	objects in flash.	
	-This means, we should add the event listener to the stage, but
	with the updater class's update function as the listener function
		-This means we need a reference to the stage
-We get a reference to the stage from the init function, then we add the
event listener to the stage. :D


-How do we get a reference to the stage inside the Updater class?

Option 1:
-Just have the actions from the main timeline call the Mansion_game.init() function
and pass a reference to the stage as a parameter.
-This sounds good to me. There might be some better way, but at least this will
work and be easy.
 

-How do I update the Controller?

Option 1:
-Write a class called something like Updater
	-It would have an onEnterFrame event listener
	which calls a function update
	-The update function would call an update function in each
	class and instance that needs it
-Sounds good to me.

 
11.09.2017 
-There will be both characters that move and don't move, as well as
items that move and don't move
	-However, there most of the time level objects just stay still and
	don't need any dynamic programming (behavior specific to them)
	-Monsters might do one or the other
	-Should they be separated into different classes by if they're a 
	character or an object, or by whether they move or not?
		-Or should there be general classes for the most common
		cases, and then separate classes for the execptions?

Option 1:
-There's a character class and an item class
	-Characters can move, items can't
		-Should characters that don't move be programmed as items?
		-Should items that move be programmed as characters?
		-Where's the sense?

Option 2:
-There's classes MovableGameObject and GameObject
	-Characters and items that move are MovableGameObjects
	-Characters and items that don't move are GameObjects

Option 3:
-There's a GameObject class, a MainCharacter class, a LevelObject class, 
MovingObject class, and a MovingMonster class
	-The GameObject class has a tags variable
	-The MovingObject extends GameObject, and MainCharacter
	and MovingMonster extend MovingObject
	-LevelObject extends GameObject
	-That should cover most of the cases
	-MovingObject might be identical to MovingMonster.
		-I don't really care.
-I think I'll go with this


-Does a monster that stands still even need a class of its own? Couldn't
it just be a movie clip?
	-If it's just a movie clip, it won't have a tag...
	-Does it need a tag?	
		-Tags are good for anything where I need to check the class
		type at runtime. 
		-Do I need to check the class type of still monsters
		at runtime?
-They could just be a GameObject for now. That way they have a tag if that's
needed, and I can change the class type later if needed.


-Should the character be its own class, separate from any kind of monsters, or should
they both inherit the same class?

Option 1:
-They inherit the same class.
	-The class they inherit from would contain anything that both the character
	and monsters would have in common
		-Functions for movement
			-Velocity, acceleration
			-moveInDirection(some representation of direction)
		-Not very much in common, so it's not so much to add
-Sounds good to me, because there's so little to add to both, they can then
develop their own ways after that
		

-They don't inherit from the same class
	-I'd have to write functions for movement separately in both, or copy paste 
	the same stuff