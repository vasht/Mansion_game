PROGRAM STRUCTURE - RESOLVED







05.10.2017
-How do I make sure that the colliders get updated when they're first created, since
usually I only update them when they've moved?

Option 1:
-Just set the has_moved flag to true in the constructor. They all immediately get updated.
Bada-bum bada-bim.


03.10.2017
-Where should the colliders be initialized?

Option 1:
-The classes that extend solid object could initialize their collider in their 
own constructors, to be whichever type they need (circle, rectangle)
	-Then the collider's constructor could set has_moved to false
	and initialize the rectangle using the collider points
-Good.

-How do the colliders get a reference to the solid object that they belong to?

Option 1:
-Just give them a reference in the constructor. Easy.


-Right now I have a library entry called RectangleCollider, of type RectangleCollider,
containing collider points at its corners. When scaling the rectangle collider, the 
points scale too and no longer look like points. What should I do about this?

Option 1:
-Leave it the way it is. Even if the points get big and you have to approximate the
center of it when placing the rectangle collider, it's still not too bad.

Option 2:
-Have the collider points in a layer in the solid object library entry (like MainCharacter for example),
and have the rectangle collider have a reference to the library entry
	-You can get the collider points with that reference
	-As a result the RectangleCollider class should no longer extend MovieClip
-I think this sounds good.


02.10.2017
-How should I get the corner points of the RectangleCollider, once it has been rotated?

Option 1:
-I could have another class called ColliderPoint or PointClip or something, which
extends MovieClip, and once added in the authoring tool, will calculate its own
center in the constructor. It would store that point in a variable.
	-I could place four of these whenever there's a RectangleCollider,
	one for each corner, and one for CircleColliders, for the middle point.
-I get the points using the collider_point_mc instances, and use the getGlobalCoord() function
to get the coordinates of them
	-With those point(s) it would either make a Rectangle or a Circle.
	Whichever it is is stored in a variable. 
		-Then this is used in the correct collision test function (collisionRectangles,
	collisionRectCirc, collisionCircles), in whatever function checks for collisions


-I decided that the CollisionDetector.collisionTestObjects() method
should call updateCollider() on each collider. But the method goes
through the dynamic objects twice. 
	-On the second time the ones that had moved have
	been set to "haven't moved", so it'll just use the new rectangle
	or circle. So there's not really a problem.
	-Furthermore, the solid objects usually don't move, so the 
	rectangles and circles in them will usually just stay the 
-All's okay.


-How should the points in each collider be updated?

Option 1:
-I have a method called updateCollider(), that is called
in each frame in each collider. 
	-It checks whether the collider has moved or not,
	and creates a new rectangle or circle to use for 
	collision testing depending on that.
	-One issue with this approach is that the game goes through all of the
	colliders twice in each frame. Once to update the rectangles and circles,
	and another time to check for collisions.
		-Could be more efficient to do both at the same time during collision
		testing.
		-> In the CollisionDetector.collisionTestObjects(), first check if
		a collider moved or not, then create a new rectangle or circle if it
		did. Then use the rectangle or circle it has for collision detection.
-This sounds pretty good, especially since the collider is only needed for collision
testing.


01.10.2017
-Which should be called first in the updater, Controller.activeController.update()
or CollisionDetector.getInstance().update()?
	-I realized that the keys that are processed in a frame are whatever keys
	were down when that frame was entered. Meaning that the player most likely
	pressed the key in the previous frame and so it was held down when the
	frame changed. 
		-So if you see something in a frame and want to press a key to 
		respond to it, it's already too late, because your key press won't
		be processed until the next frame is entered
	-> So it would make sense to process the input first, and then update the
	positions (and collision detection) of different stuff


-Should the rectangles used for collision detection be constructed each time
we're doing collision testing, or should they only be calculated once,
and then again only if the solid object moved?
	-It's not really a big deal if we do, the only calculation happening
	is localToGlobal of the points...

Option 1:
-We just construct them in the collisionTestObjects function, and use those
rectangles for collision testing. Could possibly be optimized, but it's not
a big deal.

Option 2:
-We have a boolean variable in the solid object or the collider, that states
wether it moved since the previous frame or not.
	-If it didn't move, we just use the rectangle from the previous frame
	-If it did move, we construct a new rectangle and save it
	-It's easy to implement, and it could make it perform a bit better...
-Why not.


28.09.2017
-What should the Rectangle class look like?

Option 1:
-Defined as one point, width, height and rotation
-The problem here is that each of the other points will have to be
re-calculated each time collision testing is performed on a RectangleCollider.
This especially sucks when the rectangle has a rotation. 

Option 2:
-Defined as four points
-One problem with this is that it doesn't make sure the points you give
actually make a rectangle.
	-But I can make sure of that on my own
	-You can even add tests if for some reason you want to make sure
-All four points would have to be re-calculated each time a RectangleCollider
moved
-But if they didn't move, you don't have to re-calculate the points. This
would work pretty well, since most RectangleColliders are in LevelObjects,
which are stationary.
	-So when it comes to performance, this would be better.
-This works even better considering that I can just place movie clips on the
corners and use them to get the coordinates. These are automatically repositioned
when the parent movie clip is rotated.
-So I guess the Rectangle should consist of four points!

26.09.2017
-How should the collision detection happen?

Option 1:
-I have a class called Collider, with a property tags. Then I have
a class RectangleCollider and one called CircleCollider that extend
Collider
	-Then the CollisionDetector could check the tags to know which
	type of collider it is and perform collision testing based on that
		-I'll have to have one function for every combo collisionRectangles(
		rect1:CollisionRectangle, rect2:CollisionRectangle),
		collisionRectCirc(bla...), collisionCircles(bla...)
-This sounds pretty good.


-Should DynamicObject instances also be put in the solidObjects
array?

Option 1:
-Yes. They are added automatically, because they extend SolidObject,
and the SolidObject constructor adds them to the array.
-How does the CollisionDetector check for collisions between the objects
in both arrays, since the DynamicObjects are also in the solidObjects array?
	-It first checks for collisions between the DynamicObjects. Then, 
	it checks between the dynamic objects and the solid objects, but checking
	each time that the solid object isn't also a dynamic object. 
-This option wins, because it sounds less complicated. ^^ 


Option 2:
-No. (Technically this is a bit weird, since they are SolidObjects.)
-Problem is, if I make the SolidObject constructor execute after the DynamicObject 
constructor, then the tags property hasn't been initialized.
	-I would have to have the dynamic object constructor initialize the tags
	property, and the solid object constructor would have to check if it has been
	initialized and only initialize it if it hasn't. 

 
-Should the SolidObjects be stored in an array in the CollisionDetector instance,
or should only their Colliders be stored?

Option 1:
-The SolidObjects themselves are stored in the array
	-They add themselves in their constructor
	-The CollisionDetector goes through the SolidObjects and gets the Collider
	from each SolidObject to use for collision testing
-I think I'll go with this option. The SolidObjects are stored as references anyway,
it's not like it copies them over or anything... Right...?

Option 2:
-The SolidObjects put their Collider in the array in their constructor
	-The CollisionDetector goes through the array of Colliders
	-I would have to have a variable in the Collider that is a 
	reference to the SolidObject that has the Collider.


25.09.2017
-The CollisionDetector class should use the Singleton pattern instead of
being a static class
	-The reason for this is that I read that static classes should be used
	when you only need methods, but not anything to keep a state
		-This is how it is for the Updater class
	-The CollisionDetector will keep two arrays, one with SolidObjects and 
	one with DynamicObjects, in addition to methods -> It should use the
	Singleton pattern instead of being a static class

24.09.2017
 
-Should there be a class called Room?
-Rooms will be on different frames. 
-Each room will have certain LevelObjects in it.
-The frame whith the room almost works like an object
for the room. 
	-I also don't think there are properties
	that need to be stored separately for a room.
-> I don't think a Room class is necessary. The LevelObjects
can be stored in an array in the CollisionDetector.

-Should the LevelObjects in a room be stored in an array, or
should the game just go through all MovieClips as GameObject
and check if it has the LevelObject tag, and do stuff if it 
does?

Option 1:
-Store the LevelObjects in an array
	-Have each LevelObject put itself in an array in its constructor
-I think I want to go with this. It sounds cleaner to have them in
an array than having to go through all the movie clips, testing which ones are 
LevelObjects.


22.09.2017
-Should there be a class called Level?

Option 1:
-Yes.
	-What would this be?
	Option 1:
	-One floor is one Level object
	-In this case I think the class should be called Floor,
	instead of Level
		
Option 2:
-No. There's actually no reason to have objects called levels, since the
whole game is set in a fricken mansion (well, I guess I don't know if there will
be other locations, like say a cave or a dungeon or something, but I'll worry about
that later)


21.09.2017
-How should I get the Controller to have a reference to the main character?

Option 1:
-Make the MainCharacter class use the Singleton pattern
	-This doesn't work, because the constructor is run automatically
	when the movie clip is loaded, since this class extends the
	MovieClip class.

Option 2:
-Make the Mansion_game use the Singleton pattern. 
	-That way any classes that extend MovieClip that are added
	in the authoring tool can get a reference to the Mansion_game
	instance using Mansion_game.getInstance()
		-Then the MovieClips can add a reference to themselves
		to any class that needs it.
-This sounds pretty heckin' good.


20.09.2017

-Should the updater class just be static, without instances
or should it have them?
	-It so far doesn't even have any properties
-I don't see a reason for the updater class to have any instances,
it might just as well just be used statically
-I can even make the update listener function private, and it still
works as a listener function


18.09.2017 
-Where and when should the Mansion_game.loadLevel method be called?

Situations where it needs to be called:

1. When first starting the game:
	-Since I don't have a preloader or a Menu, the level starts immediately
	-It should be called by the main timeline after calling the init function
-I think for now this is the only time, since we don't have multiple levels
or saves and loads
-Unrelated, but I also realized that I should put the levels on separate frames,
instead of scenes, like I initially thought
	-People online have said not to use scenes because they're buggy
	-I didn't really believe them, but it's better to be safe than sorry


-Should the method in the controller class be called update
or something like respondToInput or readInput?

Option 1:
-It's called update()
	-Not immediately clear what it does, except that it
	runs every frame
	-Could possibly just run a method called something like 
	readInput inside the update method. 
		-That way it's clear inside the class that it
		both runs on every frame and that it reads input
-I think I'll go with this.

Option 2:
-It's called readInput
	-It's clear everywhere that it reads input, but might 	
	not be 100% clear that it runs on every frame...


14.09.2017 
-Where should the controllers be stored?
	-They will be stored in the Controller class, as static
	variables.
	-There will be a variable pointing to the gameplayController,
	one pointing to the menuController and one pointing to
	whichever controller is active at the moment

-Should the updater class have a method
that switches between a gameplay controller and a menu controller?
	-No. The Controller class will have a static function
	setController(controllerName:String) that sets the
	controller according to the given name.

-What class calls the Controller.init() function?
	-Since the Controller class doesn't need a reference
	to anything external (so far), it could just be called 
	from the Mansion_game's init function.

-Where is the controller created?
	-It's created in a static init function in the Controller class

-How does the Updater instance get a reference to the controller?
	-It doesn't. The active controller is stored as a static 
	variable in the Controller class.
	-The updator just does stuff to Controller.activeController.


-Where should the controllers be stored?

Option 1:
-The Updator class
	-The updator instantiates both controllers in its
	constructor
	-The updator has a function that switches between which
	controller should be active
	-The updator calls controller.update();
-I don't see a problem with this, other than it feels a bit weird for
some reason.

Option 2:
-Static variables in the Controller class
	-The Updator (or the Mansion_game's init method) would call a 
	static function Controller.init() where the controllers would be created
	-The updator's setController(controllerName:String) would
	call Controller.setController(controllerName:String)
	-The updator calls Controller.activeController.update();
-Somehow this feels like it makes more sense... It's probably good. :D


-Should the Mansion_game class create the controller inside of 
the loadLevel function, or should the updater class have a method
that switches between a gameplay controller and a menu controller?
	-If we're switching between two controllers, should the one
	not used be deleted, or should it be stored for use later?	
		-I can't know how much the player will be pausing,
		but the controller doesn't take much memory, since
		it doesn't contain anything graphical.
		-> We might as well keep it stored
		-> That means we should create both controllers early
		on.
		-> That means the updater class could create both 
		controllers in its constructor

-Where is the controller created?
	-In the Mansion_game class, in the method that starts a given level/floor
	-It creates the right controller first and then makes the flash app load
	the scene with the given name

-How does the Updater instance get a reference to the controller?
	-The Mansion_game sets the Updater's controller when creating it


13.09.2017
-Does the Updater class have to extend the MovieClip class
to be able to have the onEnterFrame event listener?
	-It seems like you can only add event listeners to display
	objects in flash.	
	-This means, we should add the event listener to the stage, but
	with the updater class's update function as the listener function
		-This means we need a reference to the stage
-We get a reference to the stage from the init function, then we add the
event listener to the stage. :D


-How do we get a reference to the stage inside the Updater class?

Option 1:
-Just have the actions from the main timeline call the Mansion_game.init() function
and pass a reference to the stage as a parameter.
-This sounds good to me. There might be some better way, but at least this will
work and be easy.
 

-How do I update the Controller?

Option 1:
-Write a class called something like Updater
	-It would have an onEnterFrame event listener
	which calls a function update
	-The update function would call an update function in each
	class and instance that needs it
-Sounds good to me.

 
11.09.2017 
-There will be both characters that move and don't move, as well as
items that move and don't move
	-However, there most of the time level objects just stay still and
	don't need any dynamic programming (behavior specific to them)
	-Monsters might do one or the other
	-Should they be separated into different classes by if they're a 
	character or an object, or by whether they move or not?
		-Or should there be general classes for the most common
		cases, and then separate classes for the execptions?

Option 1:
-There's a character class and an item class
	-Characters can move, items can't
		-Should characters that don't move be programmed as items?
		-Should items that move be programmed as characters?
		-Where's the sense?

Option 2:
-There's classes MovableGameObject and GameObject
	-Characters and items that move are MovableGameObjects
	-Characters and items that don't move are GameObjects

Option 3:
-There's a GameObject class, a MainCharacter class, a LevelObject class, 
MovingObject class, and a MovingMonster class
	-The GameObject class has a tags variable
	-The MovingObject extends GameObject, and MainCharacter
	and MovingMonster extend MovingObject
	-LevelObject extends GameObject
	-That should cover most of the cases
	-MovingObject might be identical to MovingMonster.
		-I don't really care.
-I think I'll go with this


-Does a monster that stands still even need a class of its own? Couldn't
it just be a movie clip?
	-If it's just a movie clip, it won't have a tag...
	-Does it need a tag?	
		-Tags are good for anything where I need to check the class
		type at runtime. 
		-Do I need to check the class type of still monsters
		at runtime?
-They could just be a GameObject for now. That way they have a tag if that's
needed, and I can change the class type later if needed.


-Should the character be its own class, separate from any kind of monsters, or should
they both inherit the same class?

Option 1:
-They inherit the same class.
	-The class they inherit from would contain anything that both the character
	and monsters would have in common
		-Functions for movement
			-Velocity, acceleration
			-moveInDirection(some representation of direction)
		-Not very much in common, so it's not so much to add
-Sounds good to me, because there's so little to add to both, they can then
develop their own ways after that
		

-They don't inherit from the same class
	-I'd have to write functions for movement separately in both, or copy paste 
	the same stuff
