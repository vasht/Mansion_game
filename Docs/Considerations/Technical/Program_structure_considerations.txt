PROGRAM STRUCTURE - TECHNICAL CONSIDERATIONS





29.09.2017
-How should the Collider be constructed?

Option 1:
-Make the Collider extend MovieClip. Then have a square- and circle-shaped 
movie clip in the library that have the class RectangleCollider and CircleCollider.
	-Then all you have to do is place them in a separate layer in whatever 
	SolidObject you want and resize and rotate them to match the object.
	-One issue is that then there's no easy way to get the corner points of the 
	RectangleCollider once it's rotated.

-How should I get the corner points of the RectangleCollider, once it has been rotated?

Option 1:
-I could have another class called ColliderPoint or PointClip or something, which
extends MovieClip, and once added in the authoring tool, will calculate its own
center in the constructor. It would store that point in a variable.
	-I could place four of these whenever there's a RectangleCollider,
	one for each corner, and one for CircleColliders, for the middle point.
-I could give the Collider a method updateCollider or something, which would check
the type of this collider (Rectangle or Circle) and then based on which, would 
get either four or one ColliderPoints
	-The ColliderPoints are given instance names in the authoring tool
	-The updateCollider method would be called once per frame
	-With those the point(s) it would either make a Rectangle or a Circle.
	Whichever it is is stored in a variable. 
		-Then this is used in the correct collision test function (collisionRectangles,
	collisionRectCirc, collisionCircles), in whatever function checks for collisions
		-That function would first check which type of pair of colliders it has


28.09.2017
-What should the Rectangle class look like?

Option 1:
-Defined as one point, width, height and rotation
-The problem here is that each of the other points will have to be
re-calculated each time collision testing is performed on a RectangleCollider.
This especially sucks when the rectangle has a rotation. 

Option 2:
-Defined as four points
-One problem with this is that it doesn't make sure the points you give
actually make a rectangle.
	-But I can make sure of that on my own
	-You can even add tests if for some reason you want to make sure
-All four points would have to be re-calculated each time a RectangleCollider
moved
-But if they didn't move, you don't have to re-calculate the points. This
would work pretty well, since most RectangleColliders are in LevelObjects,
which are stationary.
	-So when it comes to performance, this would be better.


26.09.2017
-How do I initialize the collider instances to have the same size as a movie
clip I've added in the authoring tool?
	-



